CMinus 词法
1. 下面是语言的关键字：
else if int return void while
所有的关键字都是保留字，并且必须是小写。

2. 下面是专用符号：
+ - * / < <= > >= == != = ; , ( ) [ ] { } /* */

3. 其他标记是I D和N U M，通过下列正则表达式定义：
ID = letter letter*
NUM = digit digit*
letter = a|..|z|A|..|Z
digit = 0|..|9
小写和大写字母是有区别的。

4. 空格由空白、换行符和制表符组成。空格通常被忽略，除了它必须分开I D、N U M关
键字。

5. 注释用通常的C语言符号/ * . . . * /围起来。注释可以放在任何空白出现的位置(即注释
不能放在标记内)上，且可以超过一行。注释不能嵌套。

CMinus语法
C－的B N F语法如下：
1. program→declaration-list
2. declaration-list→declaration-listdeclaration|declaration
3. declaration→var-declaration|fun-declaration
4. var-declaration→type-specifierID;|type-specifierID[NUM];
5. type-specifier→int|void
6. fun-declaration→type-specifierID(params)|compound-stmt
7. params→params-list|void
8. param-list→param-list,param|param
9. param→type-specifierID|type-specifierID[]
10. compound-stmt→{local-declarations statement-list}
11. local-declarations→local-declarations var-declaration|empty
12. statement-list→statement-list statement|empty
13. statement→expression-stmt|compound-stmt|selection-stmt|iteration-stmt|return-stmt
14. expression-stmt→expression;|;
15. selection-stmt→if(expression)statement|if(expression)statement elsestatement
16. iteration-stmt→while(expression)statement
17. return-stmt→return;|return expression;
18. expression→var=expression|simple-expression
19. var→ID|ID[expression]
20. simple-expression→additive-expression relop additive-expression|additive-expression
21. relop→<=|<|>|>=|==|!=
22. additive-expression→additive-expression addop term|term
23. addop→+|-
24. term→term mulop factor|factor
25. mulop→*|/
26. factor→(expression)|var|call|NUM
27. call→ID(args)
28. args→arg-list|empty
29. arg-list→arg-list,expression|expression


程序由声明的列表(或序列)组成，声明可以是函数或变量声明，顺序是任意的。至少必须有一个
声明。接下来是语义限制(这些在C中不会出现)。所有的变量和函数在使用前必须声明(这避免了
向后b a c k p a t c h i n g引用)。程序中最后的声明必须是一个函数声明，名字为m a i n。注意，C－缺乏
原型，因此声明和定义之间没有区别(像C一样)。

